# Compose 版本 Version 2支持更多的指令。Version 1将来会被弃用。
version: "3"

# 定义服务
services:

  # 为project定义服务
  redis:
    # 服务的镜像名称或镜像ID。如果镜像在本地不存在，Compose将会尝试拉取镜像
    image: redis:6.2
    # 配置端口 - "宿主机端口:容器暴露端口"
    ports:
      - 6379:6379
    # 配置容器连接的网络，引用顶级 networks 下的条目(就是最下面配置的networks(一级目录))
    # networks:
    #   network_name:
    #    # 为单redis创建别名, REDIS_URL标记为redis服务的地址. (不配置aliases也可以, 这样就通过定义的服务名: redis链接)
    #    aliases:
    #      - REDIS_URL
    # 挂载
    volumes:
      - "/docker/redis/conf/redis.conf:/etc/redis/redis.conf"
      - "/docker/redis/data:/data"
    # 容器总是重新启动
    restart: always
    # 相当于执行一些命令
    command:
      redis-server /etc/redis/redis.conf --appendonly yes
    # 指定一个自定义容器名称，而不是生成的默认名称。
    container_name: redis
    # 使用该参数，container内的root拥有真正的root权限。
    privileged: true

  db:
    image: mysql:8.0.16
    ports:
      - 33060:33060
    # 添加环境变量
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
    volumes:
      - "/docker/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf"
      - "/docker/mysql/logs:/var/log/mysql"
      - "/docker/mysql/data:/var/lib/mysql"
      # - "/docker/mysql/sql/init.sql:/docker-entrypoint-initdb.d/init.sql"
      - "/etc/localtime:/etc/localtime"
    networks:
      inception:
        aliases:
         - MYSQL_URL
    restart: always
    # command: --init-file /docker-entrypoint-initdb.d/init.sql
    container_name: mysql
    privileged: true

networks:
  # bridge：默认，需要单独配置ports映射主机port和服务的port，并且开启了容器间通信
  inception:
    driver: bridge
